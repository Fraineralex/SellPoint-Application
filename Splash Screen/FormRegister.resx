<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>